{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"调用门提权（无参+有参）","date":"2022-12-14T07:19:32.629Z","updated":"2022-09-27T05:44:13.127Z","comments":true,"path":"api/articles/调用门提权（无参+有参）.json","keywords":null,"cover":[],"content":"<h1 id=\"调用门\"><a href=\"#调用门\" class=\"headerlink\" title=\"调用门\"></a>调用门</h1><h2 id=\"调用门的作用\"><a href=\"#调用门的作用\" class=\"headerlink\" title=\"调用门的作用\"></a>调用门的作用</h2><p>调用门可以用来提权，通过提权可以实现访问高地址空间等RING0（内核）层才能进行的操作</p>\n<hr>\n<h2 id=\"调用门和长调用关系\"><a href=\"#调用门和长调用关系\" class=\"headerlink\" title=\"调用门和长调用关系\"></a>调用门和长调用关系</h2><p>回顾先前的笔记可知：</p>\n<p>长调用CALL FAR CS:EIP指令要<strong>调用的地址</strong>是由CS段选择子查GDT得到的<strong>调用门</strong> 段描述符得来的，后面的EIP不发挥作用</p>\n<hr>\n<h2 id=\"调用门执行流程\"><a href=\"#调用门执行流程\" class=\"headerlink\" title=\"调用门执行流程\"></a>调用门执行流程</h2><ol>\n<li>根据CS的值 查GDT，找到对应的段描述符 这个描述符是一个调用门</li>\n<li>在调用门描述符中存储另一个代码段的选择子</li>\n<li>选择子指向的段 段.Base + 偏移地址 就是真正要执行的地址</li>\n</ol>\n<hr>\n<h2 id=\"调用门描述符\"><a href=\"#调用门描述符\" class=\"headerlink\" title=\"调用门描述符\"></a>调用门描述符</h2><h3 id=\"对比段描述符\"><a href=\"#对比段描述符\" class=\"headerlink\" title=\"对比段描述符\"></a>对比段描述符</h3><p><img src=\"https://zzypicgo.oss-cn-shanghai.aliyuncs.com/pic-go-master/img/2.png\" alt=\"2\"></p>\n<hr>\n<h3 id=\"调用门描述符结构\"><a href=\"#调用门描述符结构\" class=\"headerlink\" title=\"调用门描述符结构\"></a>调用门描述符结构</h3><p><img src=\"https://zzypicgo.oss-cn-shanghai.aliyuncs.com/pic-go-master/img/image-20210605100534276.png\" alt=\"image-20210605100534276\"></p>\n<hr>\n<p>当一个段描述符是一个调用门描述符时，有以下特征：</p>\n<ul>\n<li>S位为0，表示该段描述符为系统段描述符（调用门描述符属于系统段描述符）</li>\n<li>Type域为1100，表示该段描述符为32位调用门</li>\n<li>低16位到31位由原本的基地址变为存储一个段选择子，该段选择子才和代码<strong>真正要调用的地址</strong>相关</li>\n<li>真正要调用的地址 &#x3D; 段选择子所指向的段.Base + 32位的段中偏移 （段中偏移分为两部分：高位31-16位和低位15-0位）</li>\n<li>段.Base默认为0，故真正要调用的地址 &#x3D; 32位的段中偏移</li>\n</ul>\n<hr>\n<p>给出段描述符和调用门描述符各部分的对比（上半部分为段描述符，下半部分为调用门描述符）：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">数据位</th>\n<th align=\"left\">31-24</th>\n<th align=\"left\">23</th>\n<th align=\"left\">22</th>\n<th align=\"left\">21</th>\n<th align=\"left\">20</th>\n<th align=\"left\">19-16</th>\n<th align=\"left\">15</th>\n<th align=\"left\">14-13</th>\n<th align=\"left\">12</th>\n<th align=\"left\">11-8</th>\n<th align=\"left\">7-0</th>\n<th align=\"left\"></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">含义</td>\n<td align=\"left\">Base</td>\n<td align=\"left\">G</td>\n<td align=\"left\">D&#x2F;B</td>\n<td align=\"left\">0</td>\n<td align=\"left\">AVL</td>\n<td align=\"left\">Seg.Limit</td>\n<td align=\"left\">P</td>\n<td align=\"left\">DPL</td>\n<td align=\"left\">S</td>\n<td align=\"left\">Type</td>\n<td align=\"left\">Base</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">解释</td>\n<td align=\"left\">基地址</td>\n<td align=\"left\">粒度</td>\n<td align=\"left\">默认操作大小</td>\n<td align=\"left\">固定为0</td>\n<td align=\"left\">用于系统软件使用</td>\n<td align=\"left\">段大小限制</td>\n<td align=\"left\">有效位</td>\n<td align=\"left\">特权等级</td>\n<td align=\"left\">描述符类型</td>\n<td align=\"left\">段类型</td>\n<td align=\"left\">基地址</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">数据位</td>\n<td align=\"left\">31-16</td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\">15</td>\n<td align=\"left\">14-13</td>\n<td align=\"left\">12</td>\n<td align=\"left\">11-8</td>\n<td align=\"left\">7-5</td>\n<td align=\"left\">4-0</td>\n</tr>\n<tr>\n<td align=\"left\">含义</td>\n<td align=\"left\">offset</td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\">P</td>\n<td align=\"left\">DPL</td>\n<td align=\"left\">S</td>\n<td align=\"left\">Type</td>\n<td align=\"left\">无</td>\n<td align=\"left\">param.count</td>\n</tr>\n<tr>\n<td align=\"left\">解释</td>\n<td align=\"left\">段中偏移</td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\">有效位</td>\n<td align=\"left\">特权等级</td>\n<td align=\"left\">值为0</td>\n<td align=\"left\">值为1100</td>\n<td align=\"left\">值为000</td>\n<td align=\"left\">参数计数</td>\n</tr>\n</tbody></table>\n<hr>\n<table>\n<thead>\n<tr>\n<th align=\"left\">数据位</th>\n<th align=\"left\">31-16</th>\n<th align=\"left\">15-0</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">含义</td>\n<td align=\"left\">Base Adress</td>\n<td align=\"left\">Segment Limit</td>\n</tr>\n<tr>\n<td align=\"left\">解释</td>\n<td align=\"left\">基地址</td>\n<td align=\"left\">段大小限制</td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">数据位</td>\n<td align=\"left\">31-16</td>\n<td align=\"left\">15-0</td>\n</tr>\n<tr>\n<td align=\"left\">含义</td>\n<td align=\"left\">selector</td>\n<td align=\"left\">offset</td>\n</tr>\n<tr>\n<td align=\"left\">解释</td>\n<td align=\"left\">段选择子</td>\n<td align=\"left\">段中偏移</td>\n</tr>\n</tbody></table>\n<hr>\n<h2 id=\"构造无参调用门描述符\"><a href=\"#构造无参调用门描述符\" class=\"headerlink\" title=\"构造无参调用门描述符\"></a>构造无参调用门描述符</h2><p>了解了调用门描述符的结构后，尝试自己构造一个无参的调用门描述符，如下：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">数据位</th>\n<th align=\"left\">31-16</th>\n<th align=\"left\"></th>\n<th align=\"left\"></th>\n<th align=\"left\"></th>\n<th align=\"left\"></th>\n<th align=\"left\"></th>\n<th align=\"left\">15</th>\n<th align=\"left\">14-13</th>\n<th align=\"left\">12</th>\n<th align=\"left\">11-8</th>\n<th align=\"left\">7-5</th>\n<th align=\"left\">4-0</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">含义</td>\n<td align=\"left\">offset</td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\">P</td>\n<td align=\"left\">DPL</td>\n<td align=\"left\">S</td>\n<td align=\"left\">Type</td>\n<td align=\"left\">无</td>\n<td align=\"left\">param</td>\n</tr>\n<tr>\n<td align=\"left\">解释</td>\n<td align=\"left\">段中偏移</td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\">有效位</td>\n<td align=\"left\">特权等级</td>\n<td align=\"left\">值为0</td>\n<td align=\"left\">值为1100</td>\n<td align=\"left\">值为000</td>\n<td align=\"left\">参数</td>\n</tr>\n<tr>\n<td align=\"left\">值（二进制）</td>\n<td align=\"left\">0</td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\">1</td>\n<td align=\"left\">11</td>\n<td align=\"left\">0</td>\n<td align=\"left\">1100</td>\n<td align=\"left\">000</td>\n<td align=\"left\">0000</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th align=\"left\">数据位</th>\n<th align=\"left\">31-16</th>\n<th align=\"left\">15-0</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">含义</td>\n<td align=\"left\">selector</td>\n<td align=\"left\">offset</td>\n</tr>\n<tr>\n<td align=\"left\">解释</td>\n<td align=\"left\">段选择子</td>\n<td align=\"left\">段中偏移</td>\n</tr>\n<tr>\n<td align=\"left\">值（十六进制）</td>\n<td align=\"left\">0x0008</td>\n<td align=\"left\">0</td>\n</tr>\n</tbody></table>\n<p>得到调用门描述符为：0000EC00&#96;00080000</p>\n<p>段中偏移暂时不明确要调用的代码段，先置0</p>\n<hr>\n<h3 id=\"示例代码\"><a href=\"#示例代码\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h3><p>接下来给出一段演示代码：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"> 复制代码 隐藏代码#include &lt;Windows.h&gt;\n#include &lt;stdio.h&gt;\n\n __declspec(naked) void callGate()&#123;\n         _asm&#123;\n                 int 3                                &#x2F;&#x2F;软中断\n                 retf                                &#x2F;&#x2F;注意这里长调用对应长返回\n         &#125;\n &#125;\n\nint main()&#123;\n\n        char buff[6];\n        &#x2F;&#x2F;*(DWORD*)&amp;buff[0]&#x3D; 0x12345678;        &#x2F;&#x2F;低地址32位为0x12345678，EIP已废弃，故随便填即可\n        &#x2F;&#x2F;*(DWORD*)&amp;buff[4]&#x3D;0x48;                        &#x2F;&#x2F;高地址16位为0x48，段选择子\n\n        &#x2F;&#x2F;也可以换作这种写法\n        _asm&#123;\n                mov dword ptr ds:[buff],0x12345678        &#x2F;&#x2F;低32位赋值废弃EIP\n                lea eax,dword ptr ds:[buff]                        &#x2F;&#x2F;将buff地址给EAX\n                add eax,4                                                        &#x2F;&#x2F;地址+4，即得到高地址\n                mov word ptr ds:[eax],0x48                        &#x2F;&#x2F;高16位赋值段选择子selector\n        &#125;\n\n        &#x2F;&#x2F;使用 调用门\n        _asm&#123;\n                call fword ptr ds:[buff]                        &#x2F;&#x2F;fword 数据宽度为6字节\n        &#125;\n        return 0;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"代码说明\"><a href=\"#代码说明\" class=\"headerlink\" title=\"代码说明\"></a>代码说明</h3><p>代码十分简单，主要分为两部分：</p>\n<ul>\n<li>callGate：调用门真正要调用的函数，先软中断，然后长返回</li>\n<li>main：先构造一个CS:EIP，这里为0x48:0x12345678，然后使用调用门</li>\n</ul>\n<hr>\n<p>关于构造CS:EIP，可以观察到赋值后buff在内存中的存储情况：</p>\n<p><img src=\"https://zzypicgo.oss-cn-shanghai.aliyuncs.com/pic-go-master/img/image-20210605204546405.png\" alt=\"image-20210605204546405\"></p>\n<p>可以看到CS:EIP在内存中由高地址到低地址存储，为0x004812345678</p>\n<hr>\n<h3 id=\"将门描述符写入GDT\"><a href=\"#将门描述符写入GDT\" class=\"headerlink\" title=\"将门描述符写入GDT\"></a>将门描述符写入GDT</h3><p>在代码中，CS的也就是段选择子的值为0x48，该选择子指向的GDT的地址为要写入的地址</p>\n<p>关于Selector和GDT地址的对应关系在<a href=\"https://www.52pojie.cn/thread-1415961-1-1.html#37995569_%E6%A0%B9%E6%8D%AE%E6%AE%B5%E9%80%89%E6%8B%A9%E5%AD%90%E5%AE%9A%E4%BD%8D%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6\">保护模式笔记三 段描述符和段选择子</a>中已经说明过了，这里不再赘述</p>\n<hr>\n<h4 id=\"确定门描述符\"><a href=\"#确定门描述符\" class=\"headerlink\" title=\"确定门描述符\"></a>确定门描述符</h4><p>在写入GDT前，还需要确定要写入的值，前面已经构造好了的门描述符为：0x0000EC00&#96;00080000</p>\n<p>但其段中偏移还未确定，于是使用VC++ 6.0查看要调用的代码的地址：</p>\n<p>进入debug模式，中断后，选中callGate函数，然后右键→Go to Disassembly（查看反汇编）</p>\n<p><img src=\"https://zzypicgo.oss-cn-shanghai.aliyuncs.com/pic-go-master/img/image-20210605213307518.png\" alt=\"image-20210605213307518\"></p>\n<hr>\n<p><img src=\"https://zzypicgo.oss-cn-shanghai.aliyuncs.com/pic-go-master/img/image-20210605213346663.png\" alt=\"image-20210605213346663\"></p>\n<p>可以得到要调用的函数的地址为0x00401020</p>\n<hr>\n<p>将得到的要调用的函数地址填入门描述符中对应的offset得到：</p>\n<ul>\n<li>原：<strong>0000</strong>EC00&#96;0008<strong>0000</strong></li>\n<li>现：<strong>0040</strong>EC00&#96;0008<strong>1020</strong></li>\n</ul>\n<hr>\n<p>于是得到确定的门描述符为0040EC00&#96;00081020</p>\n<hr>\n<h4 id=\"写入门描述符\"><a href=\"#写入门描述符\" class=\"headerlink\" title=\"写入门描述符\"></a>写入门描述符</h4><p>确定完门描述符和要写入的地址后，就可以将其写入GDT了，操作如下：</p>\n<p>指令如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"> 复制代码 隐藏代码r gdtr                                查看gdtr\ndq 0x8003f000                以qword查看地址，这里的地址为上面得到的gdtr地址\neq 8003f048 0040EC00&#96;00081020                写入门描述符\ndq 0x8003f000                查看是否写入成功<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<p>过程图如下：</p>\n<p><img src=\"https://zzypicgo.oss-cn-shanghai.aliyuncs.com/pic-go-master/img/image-20210605215524725.png\" alt=\"image-20210605215524725\"></p>\n<hr>\n<h3 id=\"执行代码\"><a href=\"#执行代码\" class=\"headerlink\" title=\"执行代码\"></a>执行代码</h3><p>执行代码结果如下：</p>\n<p>Windbg获取到了代码中的int 3断点</p>\n<p><img src=\"https://zzypicgo.oss-cn-shanghai.aliyuncs.com/pic-go-master/img/image-20210605214030314.png\" alt=\"image-20210605214030314\"></p>\n<p>可以看到此时中断的地址正是门描述符中的偏移地址（要调用的地址 &#x3D; 段.Base+Offset，Base默认为0，故要调用的地址就直接等于门描述符中的offset）</p>\n<hr>\n<p>原本的Ring3（应用）层的int 3断点不会被Windbg所捕获，但这里通过门描述符提权后变为了Ring0（内核层）权限，故会引起Windbg的捕获</p>\n<p>可以查看此时的寄存器情况：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"> 复制代码 隐藏代码\nr<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://zzypicgo.oss-cn-shanghai.aliyuncs.com/pic-go-master/img/image-20210605214356746.png\" alt=\"image-20210605214356746\"></p>\n<p>此时的CS正是前面构造的门描述符中的selector（选择子）</p>\n<hr>\n<p>接下来继续单步执行</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"> 复制代码 隐藏代码\nt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://zzypicgo.oss-cn-shanghai.aliyuncs.com/pic-go-master/img/image-20210605215154023.png\" alt=\"image-20210605215154023\"></p>\n<p>可以看到int 3的下一行代码位retf，也就是callGate函数里的代码中的下一行，由此可以确定调用成功</p>\n<hr>\n<h3 id=\"对比执行前后寄存器\"><a href=\"#对比执行前后寄存器\" class=\"headerlink\" title=\"对比执行前后寄存器\"></a>对比执行前后寄存器</h3><p>前面只提到了CS段寄存器的变化，现在来总览对比执行前后寄存器的变化：</p>\n<h4 id=\"执行前寄存器情况\"><a href=\"#执行前寄存器情况\" class=\"headerlink\" title=\"执行前寄存器情况\"></a>执行前寄存器情况</h4><p>在使用调用门的汇编语句处下断点，断下后得到：</p>\n<p><img src=\"https://zzypicgo.oss-cn-shanghai.aliyuncs.com/pic-go-master/img/image-20210605215924146.png\" alt=\"image-20210605215924146\"></p>\n<hr>\n<p>得到此时的寄存器情况：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">寄存器</th>\n<th align=\"left\">值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">ESP</td>\n<td align=\"left\">12FF2C</td>\n</tr>\n<tr>\n<td align=\"left\">EBP</td>\n<td align=\"left\">12FF80</td>\n</tr>\n<tr>\n<td align=\"left\">CS</td>\n<td align=\"left\">1B</td>\n</tr>\n<tr>\n<td align=\"left\">DS</td>\n<td align=\"left\">23</td>\n</tr>\n<tr>\n<td align=\"left\">ES</td>\n<td align=\"left\">23</td>\n</tr>\n<tr>\n<td align=\"left\">SS</td>\n<td align=\"left\">23</td>\n</tr>\n<tr>\n<td align=\"left\">FS</td>\n<td align=\"left\">3B</td>\n</tr>\n<tr>\n<td align=\"left\">GS</td>\n<td align=\"left\">0</td>\n</tr>\n</tbody></table>\n<hr>\n<h4 id=\"执行后寄存器情况\"><a href=\"#执行后寄存器情况\" class=\"headerlink\" title=\"执行后寄存器情况\"></a>执行后寄存器情况</h4><p><img src=\"https://zzypicgo.oss-cn-shanghai.aliyuncs.com/pic-go-master/img/image-20210605224727368.png\" alt=\"image-20210605224727368\"></p>\n<hr>\n<hr>\n<p>得到此时的寄存器情况：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">寄存器</th>\n<th align=\"left\">值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">ESP</td>\n<td align=\"left\">B1026DD0</td>\n</tr>\n<tr>\n<td align=\"left\">EBP</td>\n<td align=\"left\">12FF80</td>\n</tr>\n<tr>\n<td align=\"left\">CS</td>\n<td align=\"left\">08</td>\n</tr>\n<tr>\n<td align=\"left\">DS</td>\n<td align=\"left\">23</td>\n</tr>\n<tr>\n<td align=\"left\">ES</td>\n<td align=\"left\">23</td>\n</tr>\n<tr>\n<td align=\"left\">SS</td>\n<td align=\"left\">10</td>\n</tr>\n<tr>\n<td align=\"left\">FS</td>\n<td align=\"left\">30</td>\n</tr>\n<tr>\n<td align=\"left\">GS</td>\n<td align=\"left\">0</td>\n</tr>\n</tbody></table>\n<hr>\n<h4 id=\"变化对比\"><a href=\"#变化对比\" class=\"headerlink\" title=\"变化对比\"></a>变化对比</h4><table>\n<thead>\n<tr>\n<th align=\"left\">寄存器</th>\n<th align=\"left\">执行前值</th>\n<th align=\"left\">执行后值</th>\n<th align=\"left\">是否变化</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">ESP</td>\n<td align=\"left\">12FF2C</td>\n<td align=\"left\">B1026DD0</td>\n<td align=\"left\">√</td>\n</tr>\n<tr>\n<td align=\"left\">EBP</td>\n<td align=\"left\">12FF80</td>\n<td align=\"left\">12FF80</td>\n<td align=\"left\">×</td>\n</tr>\n<tr>\n<td align=\"left\">CS</td>\n<td align=\"left\">1B</td>\n<td align=\"left\">08</td>\n<td align=\"left\">√</td>\n</tr>\n<tr>\n<td align=\"left\">DS</td>\n<td align=\"left\">23</td>\n<td align=\"left\">23</td>\n<td align=\"left\">×</td>\n</tr>\n<tr>\n<td align=\"left\">ES</td>\n<td align=\"left\">23</td>\n<td align=\"left\">23</td>\n<td align=\"left\">×</td>\n</tr>\n<tr>\n<td align=\"left\">SS</td>\n<td align=\"left\">23</td>\n<td align=\"left\">10</td>\n<td align=\"left\">√</td>\n</tr>\n<tr>\n<td align=\"left\">FS</td>\n<td align=\"left\">3B</td>\n<td align=\"left\">30</td>\n<td align=\"left\">√</td>\n</tr>\n<tr>\n<td align=\"left\">GS</td>\n<td align=\"left\">0</td>\n<td align=\"left\">0</td>\n<td align=\"left\">×</td>\n</tr>\n</tbody></table>\n<p>可以得出变化的寄存器有：ESP、CS、SS、FS</p>\n<p>通过调用门提权后，前后寄存器的变化涉及到TSS，这里先记录下变化，具体细节留作之后</p>\n<hr>\n<h2 id=\"构造有参调用门描述符\"><a href=\"#构造有参调用门描述符\" class=\"headerlink\" title=\"构造有参调用门描述符\"></a>构造有参调用门描述符</h2><h3 id=\"示例代码-1\"><a href=\"#示例代码-1\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\"> 复制代码 隐藏代码#include &lt;Windows.h&gt;\n#include &lt;stdio.h&gt;\n\nint a,b,c;\n\n __declspec(naked) void callGate()&#123;\n         _asm&#123;\n                pushad                                                        &#x2F;&#x2F;将所有32位通用寄存器压入堆栈\n        pushfd                                                        &#x2F;&#x2F;将32位标志寄存器EFLFAGS压入堆栈\n        &#x2F;&#x2F;关于为何是通过ESP+XXX寻址详见后续的堆栈情况说明\n                mov eax,[esp+0x24+0x8+0x8]                &#x2F;&#x2F;从堆栈中取出第一个参数\n                mov dword ptr ds:[a],eax                &#x2F;&#x2F;将取出的参数赋值给全局变量a\n                mov eax,[esp+0x24+0x8+0x4]                &#x2F;&#x2F;从堆栈中取出第二个参数\n                mov dword ptr ds:[b],eax                &#x2F;&#x2F;将取出的参数赋值给全局变量b\n        mov eax,[esp+0x24+8+0]                        &#x2F;&#x2F;从堆栈中取出第三个参数\n                mov dword ptr ds:[c],eax                &#x2F;&#x2F;将取出的参数赋值给全局变量c\n                popfd                                                        &#x2F;&#x2F;将所有32位通用寄存器出栈\n                popad                                                        &#x2F;&#x2F;将所有32位标志寄存器EFLFAGS出栈\n                retf 0xC&#x2F;&#x2F;注意这里长调用对应长返回，堆栈平衡 0xC&#x3D;12&#x3D;3*4&#x3D;参数个数*参数的数据宽度（单位字节）\n         &#125;\n &#125;\n\nint main()&#123;\n\n        char buff[6];\n        &#x2F;&#x2F;*(DWORD*)&amp;buff[0]&#x3D; 0x12345678;        &#x2F;&#x2F;低地址32位为0x12345678，EIP已废弃，故随便填即可\n        &#x2F;&#x2F;*(DWORD*)&amp;buff[4]&#x3D;0x48;                        &#x2F;&#x2F;高地址16位为0x48，段选择子\n\n        &#x2F;&#x2F;也可以换作这种写法\n        _asm&#123;\n                mov dword ptr ds:[buff],0x12345678        &#x2F;&#x2F;低32位赋值废弃EIP\n                lea eax,dword ptr ds:[buff]                        &#x2F;&#x2F;将buff地址给EAX\n                add eax,4                                                        &#x2F;&#x2F;地址+4，即得到高地址\n                mov word ptr ds:[eax],0x48                        &#x2F;&#x2F;高16位赋值段选择子selector\n        &#125;\n\n        &#x2F;&#x2F;使用 调用门\n        _asm&#123;\n                push 1\n                push 2\n                push 3\n                call fword ptr ds:[buff]                        &#x2F;&#x2F;fword 数据宽度为6字节\n        &#125;\n        printf(&quot;%X\\t%X\\t%X\\n&quot;,a,b,c);\n        return 0;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h3 id=\"代码说明-1\"><a href=\"#代码说明-1\" class=\"headerlink\" title=\"代码说明\"></a>代码说明</h3><p>与构造无参调用门描述符相比，主要变化为：</p>\n<ul>\n<li>在使用调用门前压入了三个参数：1、2、3</li>\n<li>调用代码作用为：①保护现场（压入所有通用寄存器和标志寄存器）；②从堆栈中取出对应的参数；③将取出的参数赋值给对应的全局变量</li>\n<li>调用代码最后要平衡堆栈，ret 0xC      0xC&#x3D;12&#x3D;3<em>4&#x3D;参数个数</em>参数的数据宽度（单位字节）</li>\n<li>在调用结束后，输出调用后被赋值的全局变量，验证参数是否成功传递</li>\n</ul>\n<hr>\n<h3 id=\"堆栈情况说明\"><a href=\"#堆栈情况说明\" class=\"headerlink\" title=\"堆栈情况说明\"></a>堆栈情况说明</h3><p>堆栈调用情况按执行流程顺序依次说明：</p>\n<h4 id=\"执行前-压入参数后\"><a href=\"#执行前-压入参数后\" class=\"headerlink\" title=\"执行前(压入参数后)\"></a>执行前(压入参数后)</h4><p><img src=\"https://zzypicgo.oss-cn-shanghai.aliyuncs.com/pic-go-master/img/image-20210605235129290.png\" alt=\"image-20210605235129290\"></p>\n<p>记录下此时的堆栈情况：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">地址</th>\n<th align=\"left\">相对栈顶地址</th>\n<th align=\"left\">值</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">0012FF20</td>\n<td align=\"left\">ESP</td>\n<td align=\"left\">3</td>\n<td align=\"left\">压入的第三个参数</td>\n</tr>\n<tr>\n<td align=\"left\">0012FF24</td>\n<td align=\"left\">ESP+4</td>\n<td align=\"left\">2</td>\n<td align=\"left\">压入的第二个参数</td>\n</tr>\n<tr>\n<td align=\"left\">0012FF28</td>\n<td align=\"left\">ESP+8</td>\n<td align=\"left\">1</td>\n<td align=\"left\">压入的第一个参数</td>\n</tr>\n</tbody></table>\n<hr>\n<h4 id=\"切换到调用代码后\"><a href=\"#切换到调用代码后\" class=\"headerlink\" title=\"切换到调用代码后\"></a>切换到调用代码后</h4><p><img src=\"https://zzypicgo.oss-cn-shanghai.aliyuncs.com/pic-go-master/img/image-20210605235714407.png\" alt=\"image-20210605235714407\"></p>\n<p>记录下此时的堆栈情况：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">地址</th>\n<th align=\"left\">相对栈顶地址</th>\n<th align=\"left\">值</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">B9CAFDC4</td>\n<td align=\"left\">ESP</td>\n<td align=\"left\">0040D4E8</td>\n<td align=\"left\">执行后要返回的地址</td>\n</tr>\n<tr>\n<td align=\"left\">B9CAFDC8</td>\n<td align=\"left\">ESP+0x4</td>\n<td align=\"left\">1B</td>\n<td align=\"left\">执行后要恢复的段选择子:CS</td>\n</tr>\n<tr>\n<td align=\"left\">B9CAFDCC</td>\n<td align=\"left\">ESP+0x8</td>\n<td align=\"left\">3</td>\n<td align=\"left\">压入的第三个参数</td>\n</tr>\n<tr>\n<td align=\"left\">B9CAFDD0</td>\n<td align=\"left\">ESP+0xC</td>\n<td align=\"left\">2</td>\n<td align=\"left\">压入的第二个参数</td>\n</tr>\n<tr>\n<td align=\"left\">B9CAFDD4</td>\n<td align=\"left\">ESP+0x10</td>\n<td align=\"left\">1</td>\n<td align=\"left\">压入的第一个参数</td>\n</tr>\n<tr>\n<td align=\"left\">B9CAFDD8</td>\n<td align=\"left\">ESP+0x14</td>\n<td align=\"left\">0012FF20</td>\n<td align=\"left\">执行后要恢复的堆栈寄存器:ESP</td>\n</tr>\n<tr>\n<td align=\"left\">B9CAFDDC</td>\n<td align=\"left\">ESP+0x18</td>\n<td align=\"left\">23</td>\n<td align=\"left\">执行后要恢复的段选择子:SS</td>\n</tr>\n</tbody></table>\n<hr>\n<h4 id=\"保存通用寄存器组后\"><a href=\"#保存通用寄存器组后\" class=\"headerlink\" title=\"保存通用寄存器组后\"></a>保存通用寄存器组后</h4><p><img src=\"https://zzypicgo.oss-cn-shanghai.aliyuncs.com/pic-go-master/img/image-20210606000436166.png\" alt=\"image-20210606000436166\"></p>\n<p>记录下此时的堆栈情况：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">地址</th>\n<th align=\"left\">相对栈顶地址</th>\n<th align=\"left\">值</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">B9CAFDA4～B9CAFDC0</td>\n<td align=\"left\">ESP～ESP+0x1C</td>\n<td align=\"left\">略</td>\n<td align=\"left\">通用寄存器组</td>\n</tr>\n<tr>\n<td align=\"left\">B9CAFDC4</td>\n<td align=\"left\">ESP+0x20</td>\n<td align=\"left\">0040D4E8</td>\n<td align=\"left\">执行后要返回的地址</td>\n</tr>\n<tr>\n<td align=\"left\">B9CAFDC8</td>\n<td align=\"left\">ESP+0x20+0x4</td>\n<td align=\"left\">1B</td>\n<td align=\"left\">执行后要恢复的段选择子:CS</td>\n</tr>\n<tr>\n<td align=\"left\">B9CAFDCC</td>\n<td align=\"left\">ESP+0x20+0x8</td>\n<td align=\"left\">3</td>\n<td align=\"left\">压入的第三个参数</td>\n</tr>\n<tr>\n<td align=\"left\">B9CAFDD0</td>\n<td align=\"left\">ESP+0x20+0xC</td>\n<td align=\"left\">2</td>\n<td align=\"left\">压入的第二个参数</td>\n</tr>\n<tr>\n<td align=\"left\">B9CAFDD4</td>\n<td align=\"left\">ESP+0x20+0x10</td>\n<td align=\"left\">1</td>\n<td align=\"left\">压入的第一个参数</td>\n</tr>\n<tr>\n<td align=\"left\">B9CAFDD8</td>\n<td align=\"left\">ESP+0x20+0x14</td>\n<td align=\"left\">0012FF20</td>\n<td align=\"left\">执行后要恢复的堆栈寄存器:ESP</td>\n</tr>\n<tr>\n<td align=\"left\">B9CAFDDC</td>\n<td align=\"left\">ESP+0x20+0x18</td>\n<td align=\"left\">23</td>\n<td align=\"left\">执行后要恢复的段选择子:SS</td>\n</tr>\n</tbody></table>\n<hr>\n<h4 id=\"保存标志寄存器后\"><a href=\"#保存标志寄存器后\" class=\"headerlink\" title=\"保存标志寄存器后\"></a>保存标志寄存器后</h4><p><img src=\"https://zzypicgo.oss-cn-shanghai.aliyuncs.com/pic-go-master/img/image-20210606095806445.png\" alt=\"image-20210606095806445\"></p>\n<p>记录下此时的堆栈情况：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">地址</th>\n<th align=\"left\">相对栈顶地址</th>\n<th align=\"left\">值</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">B9CAFDA0</td>\n<td align=\"left\">ESP</td>\n<td align=\"left\">0x202</td>\n<td align=\"left\">标志寄存器</td>\n</tr>\n<tr>\n<td align=\"left\">B9CAFDA4～B9CAFDC0</td>\n<td align=\"left\">ESP+0x4～ESP+0x4+0x1C</td>\n<td align=\"left\">略</td>\n<td align=\"left\">通用寄存器组</td>\n</tr>\n<tr>\n<td align=\"left\">B9CAFDC4</td>\n<td align=\"left\">ESP+0x4+0x20</td>\n<td align=\"left\">0040D4E8</td>\n<td align=\"left\">执行后要返回的地址</td>\n</tr>\n<tr>\n<td align=\"left\">B9CAFDC8</td>\n<td align=\"left\">ESP+0x4+0x20+0x4</td>\n<td align=\"left\">1B</td>\n<td align=\"left\">执行后要恢复的段选择子:CS</td>\n</tr>\n<tr>\n<td align=\"left\">B9CAFDCC</td>\n<td align=\"left\">ESP+0x4+0x20+0x8</td>\n<td align=\"left\">3</td>\n<td align=\"left\">压入的第三个参数</td>\n</tr>\n<tr>\n<td align=\"left\">B9CAFDD0</td>\n<td align=\"left\">ESP+0x4+0x20+0xC</td>\n<td align=\"left\">2</td>\n<td align=\"left\">压入的第二个参数</td>\n</tr>\n<tr>\n<td align=\"left\">B9CAFDD4</td>\n<td align=\"left\">ESP+0x4+0x20+0x10</td>\n<td align=\"left\">1</td>\n<td align=\"left\">压入的第一个参数</td>\n</tr>\n<tr>\n<td align=\"left\">B9CAFDD8</td>\n<td align=\"left\">ESP+0x4+0x20+0x14</td>\n<td align=\"left\">0012FF20</td>\n<td align=\"left\">执行后要恢复的堆栈寄存器:ESP</td>\n</tr>\n<tr>\n<td align=\"left\">B9CAFDDC</td>\n<td align=\"left\">ESP+0x4+0x20+0x18</td>\n<td align=\"left\">23</td>\n<td align=\"left\">执行后要恢复的段选择子:SS</td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"将门描述符写入GDT-1\"><a href=\"#将门描述符写入GDT-1\" class=\"headerlink\" title=\"将门描述符写入GDT\"></a>将门描述符写入GDT</h3><h4 id=\"确定门描述符-1\"><a href=\"#确定门描述符-1\" class=\"headerlink\" title=\"确定门描述符\"></a>确定门描述符</h4><p>先确定段中偏移：进入debug模式，中断后，选中callGate函数，然后右键→Go to Disassembly（查看反汇编）</p>\n<p><img src=\"https://zzypicgo.oss-cn-shanghai.aliyuncs.com/pic-go-master/img/image-20210606100712344.png\" alt=\"image-20210606100712344\"></p>\n<hr>\n<p><img src=\"https://zzypicgo.oss-cn-shanghai.aliyuncs.com/pic-go-master/img/image-20210606100827620.png\" alt=\"image-20210606100827620\"></p>\n<p>可以得到要调用的函数的地址为0x0040D480</p>\n<hr>\n<p>将得到的要调用的函数地址填入门描述符中对应的offset得到：</p>\n<ul>\n<li>原：<strong>0000</strong>EC00&#96;0008<strong>0000</strong></li>\n<li>现：<strong>0040</strong>EC00&#96;0008<strong>D480</strong></li>\n</ul>\n<p>因为此次调用门描述符需要传递三个参数，故修改为：</p>\n<p>0040EC0<strong>3</strong>&#96;0008D480</p>\n<p>PS：修改了门描述符结构中的param.count，如不熟悉可回顾上面的 调用门描述符结构</p>\n<hr>\n<p>于是得到确定的门描述符为0040EC03&#96;0008D480</p>\n<hr>\n<h4 id=\"写入门描述符-1\"><a href=\"#写入门描述符-1\" class=\"headerlink\" title=\"写入门描述符\"></a>写入门描述符</h4><p>确定完门描述符和要写入的地址后，就可以将其写入GDT了，操作如下：</p>\n<p>指令如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"> 复制代码 隐藏代码r gdtr                                查看gdtr\ndq 8003f000                以qword查看地址，这里的地址为上面得到的gdtr地址\neq 8003f048 0040EC03&#96;0008D480                写入门描述符\ndq 8003f000                查看是否写入成功<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<p>过程图如下：</p>\n<p><img src=\"https://zzypicgo.oss-cn-shanghai.aliyuncs.com/pic-go-master/img/image-20210606104637625.png\" alt=\"image-20210606104637625\"></p>\n<hr>\n<h3 id=\"执行代码-1\"><a href=\"#执行代码-1\" class=\"headerlink\" title=\"执行代码\"></a>执行代码</h3><p>执行代码结果如下：</p>\n<p><img src=\"https://zzypicgo.oss-cn-shanghai.aliyuncs.com/pic-go-master/img/image-20210606105331633.png\" alt=\"image-20210606105331633\"></p>\n<p>代码执行后，能够正确地输出三个参数，构造有参调用门描述符成功</p>\n<hr>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><ol>\n<li>当通过门，<strong>权限不变</strong>的时候，只会PUSH两个值：①CS（新的CS的值由调用门决定） ；②返回地址</li>\n<li>当通过门，<strong>权限改变</strong>的时候，会PUSH四个值：①SS；② ESP；③ CS ；④ 返回地址  （新的CS的值由调用门决定 新的SS和ESP<strong>由TSS提供</strong>）</li>\n<li>通过门调用时，要执行代码的地址由调用门中的选择子决定；使用RETF返回时，由堆栈中压入的返回地址决定</li>\n</ol>\n<hr>\n<p>关于TSS的内容留作之后的笔记(*￣3￣)╭<br>PS：写得比较匆忙，可能会有谬误之处，欢迎指出</p>\n","text":"调用门调用门的作用调用门可以用来提权，通过提权可以实现访问高地址空间等RING0（内核）层才能进行的操作 调用门和长调用关系回顾先前的笔记可知： 长调用CALL FAR CS:EIP指令要调用的地址是由CS段选择子查GDT得到的调用门 段描述符得来的，后面的EIP不发挥作用 调用...","link":"","photos":[],"count_time":{"symbolsCount":"8.8k","symbolsTime":"8 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%B0%83%E7%94%A8%E9%97%A8\"><span class=\"toc-text\">调用门</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%B0%83%E7%94%A8%E9%97%A8%E7%9A%84%E4%BD%9C%E7%94%A8\"><span class=\"toc-text\">调用门的作用</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%B0%83%E7%94%A8%E9%97%A8%E5%92%8C%E9%95%BF%E8%B0%83%E7%94%A8%E5%85%B3%E7%B3%BB\"><span class=\"toc-text\">调用门和长调用关系</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%B0%83%E7%94%A8%E9%97%A8%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B\"><span class=\"toc-text\">调用门执行流程</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%B0%83%E7%94%A8%E9%97%A8%E6%8F%8F%E8%BF%B0%E7%AC%A6\"><span class=\"toc-text\">调用门描述符</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AF%B9%E6%AF%94%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6\"><span class=\"toc-text\">对比段描述符</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%B0%83%E7%94%A8%E9%97%A8%E6%8F%8F%E8%BF%B0%E7%AC%A6%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">调用门描述符结构</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9E%84%E9%80%A0%E6%97%A0%E5%8F%82%E8%B0%83%E7%94%A8%E9%97%A8%E6%8F%8F%E8%BF%B0%E7%AC%A6\"><span class=\"toc-text\">构造无参调用门描述符</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">示例代码</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81%E8%AF%B4%E6%98%8E\"><span class=\"toc-text\">代码说明</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B0%86%E9%97%A8%E6%8F%8F%E8%BF%B0%E7%AC%A6%E5%86%99%E5%85%A5GDT\"><span class=\"toc-text\">将门描述符写入GDT</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A1%AE%E5%AE%9A%E9%97%A8%E6%8F%8F%E8%BF%B0%E7%AC%A6\"><span class=\"toc-text\">确定门描述符</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%86%99%E5%85%A5%E9%97%A8%E6%8F%8F%E8%BF%B0%E7%AC%A6\"><span class=\"toc-text\">写入门描述符</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%89%A7%E8%A1%8C%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">执行代码</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AF%B9%E6%AF%94%E6%89%A7%E8%A1%8C%E5%89%8D%E5%90%8E%E5%AF%84%E5%AD%98%E5%99%A8\"><span class=\"toc-text\">对比执行前后寄存器</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%89%A7%E8%A1%8C%E5%89%8D%E5%AF%84%E5%AD%98%E5%99%A8%E6%83%85%E5%86%B5\"><span class=\"toc-text\">执行前寄存器情况</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%89%A7%E8%A1%8C%E5%90%8E%E5%AF%84%E5%AD%98%E5%99%A8%E6%83%85%E5%86%B5\"><span class=\"toc-text\">执行后寄存器情况</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8F%98%E5%8C%96%E5%AF%B9%E6%AF%94\"><span class=\"toc-text\">变化对比</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9E%84%E9%80%A0%E6%9C%89%E5%8F%82%E8%B0%83%E7%94%A8%E9%97%A8%E6%8F%8F%E8%BF%B0%E7%AC%A6\"><span class=\"toc-text\">构造有参调用门描述符</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81-1\"><span class=\"toc-text\">示例代码</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81%E8%AF%B4%E6%98%8E-1\"><span class=\"toc-text\">代码说明</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A0%86%E6%A0%88%E6%83%85%E5%86%B5%E8%AF%B4%E6%98%8E\"><span class=\"toc-text\">堆栈情况说明</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%89%A7%E8%A1%8C%E5%89%8D-%E5%8E%8B%E5%85%A5%E5%8F%82%E6%95%B0%E5%90%8E\"><span class=\"toc-text\">执行前(压入参数后)</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%88%87%E6%8D%A2%E5%88%B0%E8%B0%83%E7%94%A8%E4%BB%A3%E7%A0%81%E5%90%8E\"><span class=\"toc-text\">切换到调用代码后</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BF%9D%E5%AD%98%E9%80%9A%E7%94%A8%E5%AF%84%E5%AD%98%E5%99%A8%E7%BB%84%E5%90%8E\"><span class=\"toc-text\">保存通用寄存器组后</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BF%9D%E5%AD%98%E6%A0%87%E5%BF%97%E5%AF%84%E5%AD%98%E5%99%A8%E5%90%8E\"><span class=\"toc-text\">保存标志寄存器后</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B0%86%E9%97%A8%E6%8F%8F%E8%BF%B0%E7%AC%A6%E5%86%99%E5%85%A5GDT-1\"><span class=\"toc-text\">将门描述符写入GDT</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A1%AE%E5%AE%9A%E9%97%A8%E6%8F%8F%E8%BF%B0%E7%AC%A6-1\"><span class=\"toc-text\">确定门描述符</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%86%99%E5%85%A5%E9%97%A8%E6%8F%8F%E8%BF%B0%E7%AC%A6-1\"><span class=\"toc-text\">写入门描述符</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%89%A7%E8%A1%8C%E4%BB%A3%E7%A0%81-1\"><span class=\"toc-text\">执行代码</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol>","author":{"name":"虫子","slug":"blog-author","avatar":"https://zzypicgo.oss-cn-shanghai.aliyuncs.com/pic-go-master/img/hello2.png","link":"/","description":"一旦错过，愿你安好","socials":{"github":"https://github.com/yuanliyuan-zhongyuan","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/wei-yuan-88-76-79","csdn":"https://blog.csdn.net/qq_42832862","juejin":"https://juejin.cn/user/2507322433224183","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/387304134"}}}},"mapped":true,"prev_post":{"title":"保护模式","uid":"199547ff1b7fb284f5e822193d2b7a56","slug":"保护模式介绍","date":"2020-08-15T10:49:36.000Z","updated":"2022-12-14T08:18:52.018Z","comments":true,"path":"api/articles/保护模式介绍.json","keywords":null,"cover":"https://cover.png","text":"保护模式x86 CPU的三种模式x86 CPU有3种模式：实模式、保护模式和虚拟8086模式 现在的操作系统大多都是处于保护模式下 实模式 保护模式 虚拟8086模式 内存寻址方式 段式寻址 支持内存分页和虚拟内存 段式寻址 寻址范围 任意寻址 有限 任意寻址 举例系统 dos系...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"Cate","slug":"Cate","count":1,"path":"api/categories/Cate.json"}],"tags":[{"name":"Tag","slug":"Tag","count":1,"path":"api/tags/Tag.json"}],"author":{"name":"虫子","slug":"blog-author","avatar":"https://zzypicgo.oss-cn-shanghai.aliyuncs.com/pic-go-master/img/hello2.png","link":"/","description":"一旦错过，愿你安好","socials":{"github":"https://github.com/yuanliyuan-zhongyuan","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/wei-yuan-88-76-79","csdn":"https://blog.csdn.net/qq_42832862","juejin":"https://juejin.cn/user/2507322433224183","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/387304134"}}}},"feature":true},"next_post":{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"段权限检查","date":"2022-12-14T07:19:32.621Z","updated":"2022-09-27T05:42:05.901Z","comments":true,"path":"api/articles/段权限检查.json","keywords":null,"cover":[],"text":"段权限检查CPU权限分级在补充段权限检查之前，要了解CPU的权限分级 处理器的段保护机制定义了RING0,RING1,RING2,RING3一共4个特权级别 大多数现代操作系统将0级用于内核&#x2F;可执行程序，将3级用于应用程序 可用于级别n的任何资源也可用于级别0到n，因此...","link":"","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[],"tags":[],"author":{"name":"虫子","slug":"blog-author","avatar":"https://zzypicgo.oss-cn-shanghai.aliyuncs.com/pic-go-master/img/hello2.png","link":"/","description":"一旦错过，愿你安好","socials":{"github":"https://github.com/yuanliyuan-zhongyuan","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/wei-yuan-88-76-79","csdn":"https://blog.csdn.net/qq_42832862","juejin":"https://juejin.cn/user/2507322433224183","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/387304134"}}}}}}