{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"段描述符和段选择子","date":"2022-12-14T07:19:32.617Z","updated":"2022-09-27T05:19:04.622Z","comments":true,"path":"api/articles/段描述符和段选择子.json","keywords":null,"cover":[],"content":"<h1 id=\"段描述符\"><a href=\"#段描述符\" class=\"headerlink\" title=\"段描述符\"></a>段描述符</h1><h2 id=\"引出问题\"><a href=\"#引出问题\" class=\"headerlink\" title=\"引出问题\"></a>引出问题</h2><p>首先要解决的就是上个笔记遗留下来的问题：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"> 复制代码 隐藏代码mov bx,ds                &#x2F;&#x2F;将段寄存器ds的Selector部分保存到bx（ecx的低16位）\nmov ax,cs                &#x2F;&#x2F;将段寄存器cs的Selector部分保存到ax（eax的低16位）\nmov ds,ax                &#x2F;&#x2F;将先前读出来的段寄存器去写ds这个段寄存器，也就是用cs段寄存器覆盖ds段寄存器<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>写寄存器是<strong>对整个96位的段寄存器进行修改</strong>，但是这里只给出了16位的段选择子Selector，<strong>剩下的80位呢</strong></p>\n<hr>\n<p>在回答问题之前，还需要了解两个结构：<strong>GDT（全局描述符表）和 LDT（局部描述符表）</strong></p>\n<p><strong>为什么要了解这两张表？</strong></p>\n<p>因为当执行类似前面<strong>对段寄存器进行修改的指令</strong>：MOV DS,AX时，CPU<strong>会先查表</strong>，根据AX的值（段选择子）来决定查找GDT还是LDT</p>\n<p>但在Windows中LDT并没有被使用，于是AX的值(<strong>段选择子</strong>)是用来决定<strong>查询表中的哪个位置</strong></p>\n<hr>\n<h2 id=\"GDT\"><a href=\"#GDT\" class=\"headerlink\" title=\"GDT\"></a>GDT</h2><h3 id=\"什么是GDT\"><a href=\"#什么是GDT\" class=\"headerlink\" title=\"什么是GDT\"></a>什么是GDT</h3><p>GDT全称：Global Descriptor Table，为全局描述符表，表中存储的数据项为<strong>段描述符</strong></p>\n<hr>\n<h3 id=\"GDT的数量\"><a href=\"#GDT的数量\" class=\"headerlink\" title=\"GDT的数量\"></a>GDT的数量</h3><p>一个处理器对应一个GDT</p>\n<hr>\n<h3 id=\"定位GDT\"><a href=\"#定位GDT\" class=\"headerlink\" title=\"定位GDT\"></a>定位GDT</h3><p>大致了解了GDT是一张表，接下来则要定位到这张表，查看其内容</p>\n<p>想要定位GDT表的位置，可以通过<strong>gdtr寄存器</strong>来定位</p>\n<p><strong>gdtr寄存器</strong>存储了GDT表的起始位置和GDT表的大小</p>\n<hr>\n<h4 id=\"通过windbg定位GDT\"><a href=\"#通过windbg定位GDT\" class=\"headerlink\" title=\"通过windbg定位GDT\"></a>通过windbg定位GDT</h4><p>通过在windbg中输入下列指令查看有关GDT的信息：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"> 复制代码 隐藏代码r gdtr      &#x2F;&#x2F;读取gdt表的起始位置\nr gdtl      &#x2F;&#x2F;读取gdt表的大小<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<hr>\n<p><img src=\"https://zzypicgo.oss-cn-shanghai.aliyuncs.com/pic-go-master/img/image-20210411215712880.png\" alt=\"image-20210411215712880\"></p>\n<hr>\n<p>得到了：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\"></th>\n<th align=\"left\">GDT表的起始位置</th>\n<th align=\"left\">GDT表的大小</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">值</td>\n<td align=\"left\">0x8003f000</td>\n<td align=\"left\">0x3ff</td>\n</tr>\n<tr>\n<td align=\"left\">数据宽度</td>\n<td align=\"left\">DWORD(4字节)</td>\n<td align=\"left\">WORD(2字节)</td>\n</tr>\n</tbody></table>\n<hr>\n<p>得到了GDT表的起始位置后，就可以查看GDT表的内容了：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"> 复制代码 隐藏代码\ndq 0x8003f000<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://zzypicgo.oss-cn-shanghai.aliyuncs.com/pic-go-master/img/image-20210411221254633.png\" alt=\"image-20210411221254633\"></p>\n<hr>\n<h2 id=\"段描述符-1\"><a href=\"#段描述符-1\" class=\"headerlink\" title=\"段描述符\"></a>段描述符</h2><p>知道了查询的表为GDT后，再说说GDT表存储的数据项：段描述符</p>\n<hr>\n<h3 id=\"什么是段描述符\"><a href=\"#什么是段描述符\" class=\"headerlink\" title=\"什么是段描述符\"></a>什么是段描述符</h3><p>段描述符顾名思义就是用来<strong>描述段的信息</strong>的，每个段对应一个段描述符</p>\n<hr>\n<h3 id=\"段描述符的数据宽度\"><a href=\"#段描述符的数据宽度\" class=\"headerlink\" title=\"段描述符的数据宽度\"></a>段描述符的数据宽度</h3><p>每个段描述符的数据宽度为：64位&#x3D;8字节（QWORD）</p>\n<hr>\n<h3 id=\"定位段描述符\"><a href=\"#定位段描述符\" class=\"headerlink\" title=\"定位段描述符\"></a>定位段描述符</h3><p><strong>通过段选择子可以定位到对应的段描述符</strong></p>\n<p>如何定位，则要先了解段选择子的结构</p>\n<hr>\n<h2 id=\"段选择子\"><a href=\"#段选择子\" class=\"headerlink\" title=\"段选择子\"></a>段选择子</h2><h3 id=\"什么是段选择子\"><a href=\"#什么是段选择子\" class=\"headerlink\" title=\"什么是段选择子\"></a>什么是段选择子</h3><p>段选择子顾名思义就是<strong>用来选择段</strong>的，通过段选择子可以定位到对应的段描述符</p>\n<hr>\n<h3 id=\"段选择子的结构\"><a href=\"#段选择子的结构\" class=\"headerlink\" title=\"段选择子的结构\"></a>段选择子的结构</h3><p><img src=\"https://zzypicgo.oss-cn-shanghai.aliyuncs.com/pic-go-master/img/image-20210411222702417.png\" alt=\"image-20210411222702417\"></p>\n<hr>\n<table>\n<thead>\n<tr>\n<th align=\"left\"></th>\n<th align=\"left\">Index</th>\n<th align=\"left\">TI</th>\n<th align=\"left\">RPL</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">含义</td>\n<td align=\"left\">索引</td>\n<td align=\"left\">表指示器</td>\n<td align=\"left\">请求特权等级</td>\n</tr>\n<tr>\n<td align=\"left\">全称</td>\n<td align=\"left\">Index</td>\n<td align=\"left\">Table Indicator</td>\n<td align=\"left\">Requested Privilege Level</td>\n</tr>\n<tr>\n<td align=\"left\">数据宽度</td>\n<td align=\"left\">13位</td>\n<td align=\"left\">1位</td>\n<td align=\"left\">2位</td>\n</tr>\n</tbody></table>\n<hr>\n<h4 id=\"Index\"><a href=\"#Index\" class=\"headerlink\" title=\"Index\"></a>Index</h4><p>索引，真正用来索引段描述符的数据</p>\n<hr>\n<h4 id=\"TI\"><a href=\"#TI\" class=\"headerlink\" title=\"TI\"></a>TI</h4><p>表指示器，用来确定选择GDT（全局描述符表）还是LDT（局部描述符表）</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\"></th>\n<th align=\"left\">TI&#x3D;&#x3D;0</th>\n<th align=\"left\">TI&#x3D;&#x3D;1</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">选择的表</td>\n<td align=\"left\">GDT</td>\n<td align=\"left\">LDT</td>\n</tr>\n</tbody></table>\n<p>在Windows上并不使用LDT表，故TI恒等于0</p>\n<hr>\n<h4 id=\"RPL\"><a href=\"#RPL\" class=\"headerlink\" title=\"RPL\"></a>RPL</h4><p>请求的特权等级，会和请求的段描述符的特权等级进行比较，留作后续补充说明</p>\n<hr>\n<h3 id=\"根据段选择子定位段描述符\"><a href=\"#根据段选择子定位段描述符\" class=\"headerlink\" title=\"根据段选择子定位段描述符\"></a>根据段选择子定位段描述符</h3><p>了解了段选择子的结构后，就可以通过段选择子来定位段描述符了</p>\n<p>例子：以段选择子 &#x3D; 0x001B为例</p>\n<p>首先将段选择子转换为二进制 ： 0000 0000 0001 1011</p>\n<p>将其按段选择子的结构填入：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\"></th>\n<th align=\"left\">Index</th>\n<th align=\"left\">TI</th>\n<th align=\"left\">RPL</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">二进制值</td>\n<td align=\"left\">0000 0000 0001 1</td>\n<td align=\"left\">0</td>\n<td align=\"left\">11</td>\n</tr>\n<tr>\n<td align=\"left\">十进制值</td>\n<td align=\"left\">3</td>\n<td align=\"left\">0</td>\n<td align=\"left\">3</td>\n</tr>\n<tr>\n<td align=\"left\">含义</td>\n<td align=\"left\">索引为3</td>\n<td align=\"left\">查询GDT表</td>\n<td align=\"left\">请求特权等级为3</td>\n</tr>\n</tbody></table>\n<p>得到的索引为3</p>\n<p>拿到索引之后就可以定位对应的段描述符了</p>\n<p><strong>对应的段描述符地址 &#x3D; GDT表首地址 + 索引× 段描述符长度 &#x3D; GDT表首地址 + 索引 × 8</strong>（注意这里的单位为字节，64位&#x3D;8字节）</p>\n<p>所以：对应的段描述符地址 &#x3D; 0x8003f000 + 3×8&#x3D; 0x8003f000 + 24 &#x3D; 0x8003f000 + 0x18 &#x3D; 0x8003f018</p>\n<p><img src=\"https://zzypicgo.oss-cn-shanghai.aliyuncs.com/pic-go-master/img/image-20210411225609994.png\" alt=\"image-20210411225609994\"></p>\n<hr>\n<h2 id=\"加载段描述符至段寄存器\"><a href=\"#加载段描述符至段寄存器\" class=\"headerlink\" title=\"加载段描述符至段寄存器\"></a>加载段描述符至段寄存器</h2><p>除了MOV指令，还可以使用LES、LSS、LDS、LFS、LGS指令修改寄存器.</p>\n<p>CS不能通过上述的指令进行修改，CS为代码段，CS的改变会导致EIP的改变，要改CS，必须要保证CS与EIP一起改，在后续的笔记会提到</p>\n<hr>\n<p>下面以lds为例子，观察指令执行前后寄存器的变化</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"> 复制代码 隐藏代码#include &lt;stdio.h&gt;\n#include &lt;windows.h&gt;\n\nchar buffer[6]&#x3D;&#123;0x44,0x33,0x22,0x11,0x1B,0x00&#125;;\n\nint main()&#123;\n\n    _asm&#123;\n        push ds\n        lds eax,fword ptr ds:[buffer]   &#x2F;&#x2F;fword为6字节\n        pop ds\n\n    &#125;\n        return 0;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h3 id=\"下断点观察\"><a href=\"#下断点观察\" class=\"headerlink\" title=\"下断点观察\"></a>下断点观察</h3><p><img src=\"https://zzypicgo.oss-cn-shanghai.aliyuncs.com/pic-go-master/img/image-20210412134301577.png\" alt=\"image-20210412134301577\"></p>\n<hr>\n<h3 id=\"执行前\"><a href=\"#执行前\" class=\"headerlink\" title=\"执行前\"></a>执行前</h3><p><img src=\"https://zzypicgo.oss-cn-shanghai.aliyuncs.com/pic-go-master/img/image-20210412132910807.png\" alt=\"image-20210412132910807\"></p>\n<hr>\n<h3 id=\"执行后\"><a href=\"#执行后\" class=\"headerlink\" title=\"执行后\"></a>执行后</h3><p><img src=\"https://610-pic-bed.oss-cn-shenzhen.aliyuncs.com/image-20210412132938532.png\" alt=\"image-20210412132938532\"></p>\n<hr>\n<h3 id=\"对比执行前后\"><a href=\"#对比执行前后\" class=\"headerlink\" title=\"对比执行前后\"></a>对比执行前后</h3><table>\n<thead>\n<tr>\n<th align=\"left\"></th>\n<th align=\"left\">EAX</th>\n<th align=\"left\">DS</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">执行前</td>\n<td align=\"left\">0xCCCCCCCC</td>\n<td align=\"left\">0x23</td>\n</tr>\n<tr>\n<td align=\"left\">执行后</td>\n<td align=\"left\">0x11223344</td>\n<td align=\"left\">0x1B</td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"得出指令功能\"><a href=\"#得出指令功能\" class=\"headerlink\" title=\"得出指令功能\"></a>得出指令功能</h3><p>LDS指令格式为：LDS OPRD1,OPRD2</p>\n<p>OPRD1用来接收OPRD2的低(OPRD-2)字节</p>\n<p>OPRD2的高2字节为段选择子，通过段选择子修改DS</p>\n<p>其它指令：LES、LSS、LFS、LGS也是一样的格式，只不过修改的段寄存器不同罢了</p>\n<hr>\n<h2 id=\"内存寻址关系一览图\"><a href=\"#内存寻址关系一览图\" class=\"headerlink\" title=\"内存寻址关系一览图\"></a>内存寻址关系一览图</h2><p>下面给出内存寻址的流程中，GDT、段描述符、段选择子的关系图：</p>\n<p><img src=\"https://610-pic-bed.oss-cn-shenzhen.aliyuncs.com/image-20210412153414326.png\" alt=\"image-20210412153414326\"></p>\n<hr>\n<p>以MOV EAX,DWORD PTR DS:[0x123456]为例</p>\n<p>根据DS获得Segment Selector（段选择子）：0x23（在<a href=\"https://www.52pojie.cn/thread-1415421-1-1.html\"> 保护模式笔记二 段寄存器</a>中获得的，不同机器可能不同）</p>\n<p>根据地址获得Offset(偏移)：0x123456</p>\n<p>然后通过段选择子查询GDT（全局描述符表）得到对应的Segment Descriptor（段描述符）</p>\n<p>通过段描述符可以得到Base（基地址）&#x3D; 0 （DS段寄存器的Base为0）</p>\n<p>最终要访问的内存地址为：Base+Offset &#x3D; 0+0x123456&#x3D;0x123456（期间也会根据段描述符进行一系列校验，这里暂且不提）</p>\n<hr>\n<h1 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h1><p>该篇笔记主要介绍了如何<strong>通过段选择子定位到对应的段描述符</strong>并补充了<strong>段选择子的结构和修改段寄存器的指令</strong></p>\n<p>但关于段描述符的结构还没有深入介绍</p>\n<p>前面引出的问题也尚未完全解决，通过前面的学习得知<strong>段寄存器剩下的80位是通过段描述符来填充的</strong></p>\n<p>但是段描述符的长度只有64位，如何填充80位？</p>\n<p>这些都留作之后的笔记再作说明(づ￣ 3￣)づ</p>\n","text":"段描述符引出问题首先要解决的就是上个笔记遗留下来的问题： 复制代码 隐藏代码mov bx,ds &#x2F;&#x2F;将段寄存器ds的Selector部分保存到bx（ecx的低16位） mov ax,cs &#x2F;&#x2F;将段寄存器cs的Selector部分保存到ax（...","link":"","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6\"><span class=\"toc-text\">段描述符</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BC%95%E5%87%BA%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">引出问题</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#GDT\"><span class=\"toc-text\">GDT</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AFGDT\"><span class=\"toc-text\">什么是GDT</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#GDT%E7%9A%84%E6%95%B0%E9%87%8F\"><span class=\"toc-text\">GDT的数量</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E4%BD%8DGDT\"><span class=\"toc-text\">定位GDT</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%80%9A%E8%BF%87windbg%E5%AE%9A%E4%BD%8DGDT\"><span class=\"toc-text\">通过windbg定位GDT</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6-1\"><span class=\"toc-text\">段描述符</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AF%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6\"><span class=\"toc-text\">什么是段描述符</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6%E7%9A%84%E6%95%B0%E6%8D%AE%E5%AE%BD%E5%BA%A6\"><span class=\"toc-text\">段描述符的数据宽度</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E4%BD%8D%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6\"><span class=\"toc-text\">定位段描述符</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%AE%B5%E9%80%89%E6%8B%A9%E5%AD%90\"><span class=\"toc-text\">段选择子</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AF%E6%AE%B5%E9%80%89%E6%8B%A9%E5%AD%90\"><span class=\"toc-text\">什么是段选择子</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%AE%B5%E9%80%89%E6%8B%A9%E5%AD%90%E7%9A%84%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">段选择子的结构</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Index\"><span class=\"toc-text\">Index</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#TI\"><span class=\"toc-text\">TI</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#RPL\"><span class=\"toc-text\">RPL</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A0%B9%E6%8D%AE%E6%AE%B5%E9%80%89%E6%8B%A9%E5%AD%90%E5%AE%9A%E4%BD%8D%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6\"><span class=\"toc-text\">根据段选择子定位段描述符</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8A%A0%E8%BD%BD%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6%E8%87%B3%E6%AE%B5%E5%AF%84%E5%AD%98%E5%99%A8\"><span class=\"toc-text\">加载段描述符至段寄存器</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%8B%E6%96%AD%E7%82%B9%E8%A7%82%E5%AF%9F\"><span class=\"toc-text\">下断点观察</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%89%A7%E8%A1%8C%E5%89%8D\"><span class=\"toc-text\">执行前</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%89%A7%E8%A1%8C%E5%90%8E\"><span class=\"toc-text\">执行后</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AF%B9%E6%AF%94%E6%89%A7%E8%A1%8C%E5%89%8D%E5%90%8E\"><span class=\"toc-text\">对比执行前后</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BE%97%E5%87%BA%E6%8C%87%E4%BB%A4%E5%8A%9F%E8%83%BD\"><span class=\"toc-text\">得出指令功能</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%86%85%E5%AD%98%E5%AF%BB%E5%9D%80%E5%85%B3%E7%B3%BB%E4%B8%80%E8%A7%88%E5%9B%BE\"><span class=\"toc-text\">内存寻址关系一览图</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%AF%B4%E6%98%8E\"><span class=\"toc-text\">说明</span></a></li></ol>","author":{"name":"虫子","slug":"blog-author","avatar":"https://zzypicgo.oss-cn-shanghai.aliyuncs.com/pic-go-master/img/hello2.png","link":"/","description":"一旦错过，愿你安好","socials":{"github":"https://github.com/yuanliyuan-zhongyuan","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/wei-yuan-88-76-79","csdn":"https://blog.csdn.net/qq_42832862","juejin":"https://juejin.cn/user/2507322433224183","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/387304134"}}}},"mapped":true,"prev_post":{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"段权限检查","date":"2022-12-14T07:19:32.621Z","updated":"2022-09-27T05:42:05.901Z","comments":true,"path":"api/articles/段权限检查.json","keywords":null,"cover":[],"text":"段权限检查CPU权限分级在补充段权限检查之前，要了解CPU的权限分级 处理器的段保护机制定义了RING0,RING1,RING2,RING3一共4个特权级别 大多数现代操作系统将0级用于内核&#x2F;可执行程序，将3级用于应用程序 可用于级别n的任何资源也可用于级别0到n，因此...","link":"","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[],"tags":[],"author":{"name":"虫子","slug":"blog-author","avatar":"https://zzypicgo.oss-cn-shanghai.aliyuncs.com/pic-go-master/img/hello2.png","link":"/","description":"一旦错过，愿你安好","socials":{"github":"https://github.com/yuanliyuan-zhongyuan","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/wei-yuan-88-76-79","csdn":"https://blog.csdn.net/qq_42832862","juejin":"https://juejin.cn/user/2507322433224183","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/387304134"}}}}},"next_post":{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"段寄存器","date":"2022-12-14T07:19:32.614Z","updated":"2022-09-27T05:18:27.333Z","comments":true,"path":"api/articles/段寄存器.json","keywords":null,"cover":[],"text":"段寄存器什么是段寄存器在先前的逆向基础笔记五 标志寄存器中，有提到过段寄存器的概念 当使用汇编来操作一个内存地址时，就会涉及到段寄存器，只不过先前并没有太过在意 如： 复制代码 隐藏代码 mov dword ptr ds:[0x123456],eax 注意汇编语句中的 ds，它就...","link":"","photos":[],"count_time":{"symbolsCount":"4.9k","symbolsTime":"4 mins."},"categories":[],"tags":[],"author":{"name":"虫子","slug":"blog-author","avatar":"https://zzypicgo.oss-cn-shanghai.aliyuncs.com/pic-go-master/img/hello2.png","link":"/","description":"一旦错过，愿你安好","socials":{"github":"https://github.com/yuanliyuan-zhongyuan","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/wei-yuan-88-76-79","csdn":"https://blog.csdn.net/qq_42832862","juejin":"https://juejin.cn/user/2507322433224183","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/387304134"}}}}}}