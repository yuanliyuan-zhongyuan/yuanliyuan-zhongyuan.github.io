{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"段权限检查","date":"2022-12-14T07:19:32.621Z","updated":"2022-09-27T05:42:05.901Z","comments":true,"path":"api/articles/段权限检查.json","keywords":null,"cover":[],"content":"<h1 id=\"段权限检查\"><a href=\"#段权限检查\" class=\"headerlink\" title=\"段权限检查\"></a>段权限检查</h1><h2 id=\"CPU权限分级\"><a href=\"#CPU权限分级\" class=\"headerlink\" title=\"CPU权限分级\"></a>CPU权限分级</h2><p>在补充段权限检查之前，要了解CPU的权限分级</p>\n<p><img src=\"https://zzypicgo.oss-cn-shanghai.aliyuncs.com/pic-go-master/img/image-20210420171048562.png\" alt=\"image-20210420171048562\"></p>\n<ul>\n<li>处理器的段保护机制定义了<strong>RING0,RING1,RING2,RING3一共4个特权级别</strong></li>\n<li>大多数现代操作系统将0级用于<strong>内核&#x2F;可执行程序</strong>，将3级用于<strong>应用程序</strong></li>\n<li>可用于级别n的任何资源也可用于级别0到n，因此<strong>特权级别是环</strong></li>\n<li>当特权较低的进程尝试访问特权较高的进程时，将向操作系统报告<a href=\"https://en.wikipedia.org/wiki/General_protection_fault\">常规保护错误</a><strong>异常</strong></li>\n<li>8086中的实模式程序在级别0（最高特权级别）上执行，而8086中的虚拟模式在级别3执行所有程序</li>\n<li>多数现代x86内核<strong>仅使用</strong>两个特权级别，即RING0和RING3</li>\n</ul>\n<hr>\n<table>\n<thead>\n<tr>\n<th align=\"left\"></th>\n<th align=\"left\">RING0</th>\n<th align=\"left\">RING1</th>\n<th align=\"left\">RING2</th>\n<th align=\"left\">RING3</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><strong>通常用途</strong></td>\n<td align=\"left\">内核</td>\n<td align=\"left\">特权代码、特权数据、特权栈</td>\n<td align=\"left\">特权代码、特权数据、特权栈</td>\n<td align=\"left\">应用程序</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>级别</strong></td>\n<td align=\"left\">最高</td>\n<td align=\"left\">第二高</td>\n<td align=\"left\">第三高</td>\n<td align=\"left\">最低</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>对应层</strong></td>\n<td align=\"left\">内核层（内核态）</td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\">应用层（用户态）</td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"内核层\"><a href=\"#内核层\" class=\"headerlink\" title=\"内核层\"></a>内核层</h3><p>在内核模式下，CPU可以执行其体系结构允许的<strong>任何操作</strong>。可以执行任何指令，启动任何I &#x2F; O操作，访问任何内存区域，使用特权指令，控制中断、修改页表、访问设备等等</p>\n<h3 id=\"应用层\"><a href=\"#应用层\" class=\"headerlink\" title=\"应用层\"></a>应用层</h3><p>硬件会对CPU操作<strong>施加某些限制</strong>。通常，某些指令是<strong>不允许</strong>的（尤其是那些指令（包括I &#x2F; O操作）可能会改变机器的全局状态），某些内存区域无法访问等。CPU的用户模式功能通常是这些指令的子集可以在内核模式下使用，但是在某些情况下，例如非本机体系结构的硬件仿真，它们可能与标准内核模式下的可用软件有显着差异</p>\n<hr>\n<h3 id=\"应用层切换内核层\"><a href=\"#应用层切换内核层\" class=\"headerlink\" title=\"应用层切换内核层\"></a>应用层切换内核层</h3><p>应用程序的代码运行在最低运行级别上ring3上，不能做<strong>受限操作</strong></p>\n<p>如果要做受限操作，比如要访问磁盘，写文件，那就要通过<strong>执行系统调用（函数）</strong>，执行系统调用的时候，CPU的运行级别会发生从ring3到ring0的<strong>切换</strong>，并<strong>跳转</strong>到系统调用对应的内核代码位置执行，这样内核就为你完成了设备访问，完成之后再从ring0返回ring3。这个过程也称作<strong>用户态和内核态的切换</strong></p>\n<hr>\n<h2 id=\"CPU权限分级的作用\"><a href=\"#CPU权限分级的作用\" class=\"headerlink\" title=\"CPU权限分级的作用\"></a>CPU权限分级的作用</h2><p>RING设计的初衷是将系统权限与程序<strong>分离</strong>出来，使之能够让OS更好的管理当前系统资源，也使得系统<strong>更加稳定</strong></p>\n<p>举个很常见的例子：</p>\n<p>普通的应用程序崩溃一般是程序未响应或者停止运行，并不会影响系统的正常运行</p>\n<p>但当驱动程序出现问题后，动辄 <code>BSOD</code>（蓝屏死机）</p>\n<hr>\n<h2 id=\"判断程序特权级别\"><a href=\"#判断程序特权级别\" class=\"headerlink\" title=\"判断程序特权级别\"></a>判断程序特权级别</h2><p>了解了CPU的权限分级后，再来了解 如何查看程序处于几环</p>\n<p>这涉及到了CPL(Current Privilege Level) ：当前特权级别</p>\n<p>CPL是段寄存器<strong>CS和SS</strong>的<strong>段选择子</strong>的后两位</p>\n<p>在<a href=\"https://www.52pojie.cn/thread-1415961-1-1.html#37995569_%E6%AE%B5%E9%80%89%E6%8B%A9%E5%AD%90%E7%9A%84%E7%BB%93%E6%9E%84\">保护模式笔记三 段描述符和段选择子</a>中已经说明了段选择子的结构</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\"></th>\n<th align=\"left\">Index</th>\n<th align=\"left\">TI</th>\n<th align=\"left\">RPL</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">含义</td>\n<td align=\"left\">索引</td>\n<td align=\"left\">表指示器</td>\n<td align=\"left\">请求特权等级</td>\n</tr>\n<tr>\n<td align=\"left\">全称</td>\n<td align=\"left\">Index</td>\n<td align=\"left\">Table Indicator</td>\n<td align=\"left\">Requested Privilege Level</td>\n</tr>\n<tr>\n<td align=\"left\">数据宽度</td>\n<td align=\"left\">13位</td>\n<td align=\"left\">1位</td>\n<td align=\"left\">2位</td>\n</tr>\n</tbody></table>\n<p>对比可知，<strong>当段寄存器为CS和SS时，其段选择子的RPL就是CPL</strong></p>\n<hr>\n<p>通过OD附加<strong>应用程序</strong>后查看其段寄存器：</p>\n<p><img src=\"https://zzypicgo.oss-cn-shanghai.aliyuncs.com/pic-go-master/img/image-20210420204434380.png\" alt=\"image-20210420204434380\"></p>\n<hr>\n<table>\n<thead>\n<tr>\n<th align=\"left\">段寄存器</th>\n<th align=\"left\">段选择子(Selector)</th>\n<th align=\"left\">二进制段选择子</th>\n<th align=\"left\">二进制RPL</th>\n<th align=\"left\">十进制RPL</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">ES</td>\n<td align=\"left\">23</td>\n<td align=\"left\">0010 0011</td>\n<td align=\"left\">11</td>\n<td align=\"left\">3</td>\n</tr>\n<tr>\n<td align=\"left\">CS</td>\n<td align=\"left\">1B</td>\n<td align=\"left\">0001 1011</td>\n<td align=\"left\">11（CPL）</td>\n<td align=\"left\">3（CPL）</td>\n</tr>\n<tr>\n<td align=\"left\">SS</td>\n<td align=\"left\">23</td>\n<td align=\"left\">0010 0011</td>\n<td align=\"left\">11（CPL）</td>\n<td align=\"left\">3（CPL）</td>\n</tr>\n<tr>\n<td align=\"left\">DS</td>\n<td align=\"left\">23</td>\n<td align=\"left\">0010 0011</td>\n<td align=\"left\">11</td>\n<td align=\"left\">3</td>\n</tr>\n<tr>\n<td align=\"left\">FS</td>\n<td align=\"left\">3B</td>\n<td align=\"left\">0011 1011</td>\n<td align=\"left\">11</td>\n<td align=\"left\">3</td>\n</tr>\n</tbody></table>\n<p>根据CS和SS的段选择子可以得到CPL为3，印证了应用程序的CPU权限分级为RING3</p>\n<hr>\n<h2 id=\"EPL-有效特权级别\"><a href=\"#EPL-有效特权级别\" class=\"headerlink\" title=\"EPL(有效特权级别)\"></a>EPL(有效特权级别)</h2><p>上面提到了CPL（当前特权级别）和RPL（请求特权级别）</p>\n<p>所谓的有效特权级别EPL(Effective Privilege Level)，顾名思义就是<strong>最终的确定可否执行的特权</strong></p>\n<p><strong>EPL &#x3D; max(RPL,CPL)</strong></p>\n<p>即 EPL 等于 RPL和CPL的<strong>最大值</strong>，EPL为RPL和CPL中<strong>较低的权限</strong></p>\n<hr>\n<h2 id=\"DPL-描述符特权级别\"><a href=\"#DPL-描述符特权级别\" class=\"headerlink\" title=\"DPL(描述符特权级别)\"></a>DPL(描述符特权级别)</h2><p>关于DPL，在<a href=\"https://www.52pojie.cn/thread-1416456-1-1.html#38006658_dpl\">保护模式笔记四 段描述符结构</a>中已经略微说明了，现在展开细说</p>\n<h3 id=\"DPL的作用\"><a href=\"#DPL的作用\" class=\"headerlink\" title=\"DPL的作用\"></a>DPL的作用</h3><p>DPL存储在段描述符中，规定了访问该段所需要的特权级别是什么；即 <strong>如果想要加载某个段描述符，就必须具备对应的特权级别</strong></p>\n<h3 id=\"DPL权限检查\"><a href=\"#DPL权限检查\" class=\"headerlink\" title=\"DPL权限检查\"></a>DPL权限检查</h3><p>当加载一个段描述符时，首先CPU要判断其P位（有效位），如果该段描述符有效，则继续进行DPL权限检查</p>\n<p>所谓的DPL权限检查 就是 <strong>判断 DPL是否满足：EPL&#x3D;max(RPL,CPL)&lt;&#x3D;DPL是否成立</strong></p>\n<p>只有当EPL&lt;&#x3D;DPL时，权限检查才通过，段描述符才能够被加载到段寄存器中</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">RPL</th>\n<th align=\"left\">CPL</th>\n<th align=\"left\">EPL</th>\n<th align=\"left\">DPL</th>\n<th align=\"left\">权限检查是否通过</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">0</td>\n<td align=\"left\">0</td>\n<td align=\"left\">0</td>\n<td align=\"left\">0</td>\n<td align=\"left\">√</td>\n</tr>\n<tr>\n<td align=\"left\">0</td>\n<td align=\"left\">0</td>\n<td align=\"left\">0</td>\n<td align=\"left\">3</td>\n<td align=\"left\">√</td>\n</tr>\n<tr>\n<td align=\"left\">0</td>\n<td align=\"left\">3</td>\n<td align=\"left\">3</td>\n<td align=\"left\">0</td>\n<td align=\"left\">×</td>\n</tr>\n<tr>\n<td align=\"left\">0</td>\n<td align=\"left\">3</td>\n<td align=\"left\">3</td>\n<td align=\"left\">3</td>\n<td align=\"left\">√</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">0</td>\n<td align=\"left\">3</td>\n<td align=\"left\">0</td>\n<td align=\"left\">×</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">0</td>\n<td align=\"left\">3</td>\n<td align=\"left\">3</td>\n<td align=\"left\">√</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">3</td>\n<td align=\"left\">3</td>\n<td align=\"left\">0</td>\n<td align=\"left\">×</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">3</td>\n<td align=\"left\">3</td>\n<td align=\"left\">3</td>\n<td align=\"left\">√</td>\n</tr>\n</tbody></table>\n<hr>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><table>\n<thead>\n<tr>\n<th align=\"left\"></th>\n<th align=\"left\">RPL</th>\n<th align=\"left\">CPL</th>\n<th align=\"left\">EPL</th>\n<th align=\"left\">DPL</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">含义</td>\n<td align=\"left\">请求特权级别</td>\n<td align=\"left\">当前特权级别</td>\n<td align=\"left\">有效特权级别</td>\n<td align=\"left\">描述符特权级别</td>\n</tr>\n<tr>\n<td align=\"left\">说明</td>\n<td align=\"left\">用什么权限去访问一个段</td>\n<td align=\"left\">CPU当权的权限级别</td>\n<td align=\"left\">max(RPL,CPL)</td>\n<td align=\"left\">访问该段所需要的特权级别</td>\n</tr>\n</tbody></table>\n","text":"段权限检查CPU权限分级在补充段权限检查之前，要了解CPU的权限分级 处理器的段保护机制定义了RING0,RING1,RING2,RING3一共4个特权级别 大多数现代操作系统将0级用于内核&#x2F;可执行程序，将3级用于应用程序 可用于级别n的任何资源也可用于级别0到n，因此...","link":"","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%AE%B5%E6%9D%83%E9%99%90%E6%A3%80%E6%9F%A5\"><span class=\"toc-text\">段权限检查</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#CPU%E6%9D%83%E9%99%90%E5%88%86%E7%BA%A7\"><span class=\"toc-text\">CPU权限分级</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%86%85%E6%A0%B8%E5%B1%82\"><span class=\"toc-text\">内核层</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BA%94%E7%94%A8%E5%B1%82\"><span class=\"toc-text\">应用层</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BA%94%E7%94%A8%E5%B1%82%E5%88%87%E6%8D%A2%E5%86%85%E6%A0%B8%E5%B1%82\"><span class=\"toc-text\">应用层切换内核层</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#CPU%E6%9D%83%E9%99%90%E5%88%86%E7%BA%A7%E7%9A%84%E4%BD%9C%E7%94%A8\"><span class=\"toc-text\">CPU权限分级的作用</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%A4%E6%96%AD%E7%A8%8B%E5%BA%8F%E7%89%B9%E6%9D%83%E7%BA%A7%E5%88%AB\"><span class=\"toc-text\">判断程序特权级别</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#EPL-%E6%9C%89%E6%95%88%E7%89%B9%E6%9D%83%E7%BA%A7%E5%88%AB\"><span class=\"toc-text\">EPL(有效特权级别)</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#DPL-%E6%8F%8F%E8%BF%B0%E7%AC%A6%E7%89%B9%E6%9D%83%E7%BA%A7%E5%88%AB\"><span class=\"toc-text\">DPL(描述符特权级别)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#DPL%E7%9A%84%E4%BD%9C%E7%94%A8\"><span class=\"toc-text\">DPL的作用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#DPL%E6%9D%83%E9%99%90%E6%A3%80%E6%9F%A5\"><span class=\"toc-text\">DPL权限检查</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol>","author":{"name":"虫子","slug":"blog-author","avatar":"https://zzypicgo.oss-cn-shanghai.aliyuncs.com/pic-go-master/img/hello2.png","link":"/","description":"一旦错过，愿你安好","socials":{"github":"https://github.com/yuanliyuan-zhongyuan","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/wei-yuan-88-76-79","csdn":"https://blog.csdn.net/qq_42832862","juejin":"https://juejin.cn/user/2507322433224183","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/387304134"}}}},"mapped":true,"prev_post":{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"调用门提权（无参+有参）","date":"2022-12-14T07:19:32.629Z","updated":"2022-09-27T05:44:13.127Z","comments":true,"path":"api/articles/调用门提权（无参+有参）.json","keywords":null,"cover":[],"text":"调用门调用门的作用调用门可以用来提权，通过提权可以实现访问高地址空间等RING0（内核）层才能进行的操作 调用门和长调用关系回顾先前的笔记可知： 长调用CALL FAR CS:EIP指令要调用的地址是由CS段选择子查GDT得到的调用门 段描述符得来的，后面的EIP不发挥作用 调用...","link":"","photos":[],"count_time":{"symbolsCount":"8.8k","symbolsTime":"8 mins."},"categories":[],"tags":[],"author":{"name":"虫子","slug":"blog-author","avatar":"https://zzypicgo.oss-cn-shanghai.aliyuncs.com/pic-go-master/img/hello2.png","link":"/","description":"一旦错过，愿你安好","socials":{"github":"https://github.com/yuanliyuan-zhongyuan","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/wei-yuan-88-76-79","csdn":"https://blog.csdn.net/qq_42832862","juejin":"https://juejin.cn/user/2507322433224183","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/387304134"}}}}},"next_post":{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"段描述符和段选择子","date":"2022-12-14T07:19:32.617Z","updated":"2022-09-27T05:19:04.622Z","comments":true,"path":"api/articles/段描述符和段选择子.json","keywords":null,"cover":[],"text":"段描述符引出问题首先要解决的就是上个笔记遗留下来的问题： 复制代码 隐藏代码mov bx,ds &#x2F;&#x2F;将段寄存器ds的Selector部分保存到bx（ecx的低16位） mov ax,cs &#x2F;&#x2F;将段寄存器cs的Selector部分保存到ax（...","link":"","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[],"tags":[],"author":{"name":"虫子","slug":"blog-author","avatar":"https://zzypicgo.oss-cn-shanghai.aliyuncs.com/pic-go-master/img/hello2.png","link":"/","description":"一旦错过，愿你安好","socials":{"github":"https://github.com/yuanliyuan-zhongyuan","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/wei-yuan-88-76-79","csdn":"https://blog.csdn.net/qq_42832862","juejin":"https://juejin.cn/user/2507322433224183","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/387304134"}}}}}}